{"/home/travis/build/npmtest/node-npmtest-complexity-report/test.js":"/* istanbul instrument in package npmtest_complexity_report */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-complexity-report/lib.npmtest_complexity_report.js":"/* istanbul instrument in package npmtest_complexity_report */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_complexity_report = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_complexity_report = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-complexity-report/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-complexity-report && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_complexity_report */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_complexity_report\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_complexity_report.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_complexity_report.rollup.js'] =\n            local.assetsDict['/assets.npmtest_complexity_report.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_complexity_report.__dirname + '/lib.npmtest_complexity_report.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-complexity-report/node_modules/complexity-report/src/formats/json.js":"/*globals exports, JSON */\n\n'use strict';\n\nexports.format = format;\n\nfunction format (result) {\n    return JSON.stringify(result, undefined, 4);\n}\n\n","/home/travis/build/npmtest/node-npmtest-complexity-report/node_modules/complexity-report/src/formats/markdown.js":"/*globals exports */\n\n'use strict';\n\nexports.format = format;\n\nfunction format (result) {\n    return result.reports.reduce(function (formatted, report) {\n        return formatted + formatModule(report) + '\\n\\n';\n    }, formatProject(result));\n}\n\nfunction formatProject (result) {\n    return [\n        '# Complexity report, ', (new Date()).toLocaleDateString(), '\\n\\n',\n        '* Mean per-function logical LOC: ', result.loc, '\\n',\n        '* Mean per-function parameter count: ', result.params, '\\n',\n        '* Mean per-function cyclomatic complexity: ', result.cyclomatic, '\\n',\n        '* Mean per-function Halstead effort: ', result.effort, '\\n',\n        '* Mean per-module maintainability index: ', result.maintainability, '\\n',\n        '* First-order density: ', result.firstOrderDensity, '%\\n',\n        '* Change cost: ', result.changeCost, '%\\n',\n        '* Core size: ', result.coreSize, '%\\n\\n'\n    ].join('');\n}\n\nfunction formatModule (report) {\n    return [\n        '## ', report.path, '\\n\\n',\n        '* Physical LOC: ', report.aggregate.sloc.physical, '\\n',\n        '* Logical LOC: ', report.aggregate.sloc.logical, '\\n',\n        '* Mean parameter count: ', report.params, '\\n',\n        '* Cyclomatic complexity: ', report.aggregate.cyclomatic, '\\n',\n        '* Cyclomatic complexity density: ', report.aggregate.cyclomaticDensity, '%\\n',\n        '* Maintainability index: ', report.maintainability, '\\n',\n        '* Dependency count: ', report.dependencies.length,\n        formatFunctions(report.functions)\n    ].join('');\n}\n\nfunction formatFunctions (report) {\n    return report.reduce(function (formatted, r) {\n        return formatted + '\\n' + formatFunction(r);\n    }, '');\n}\n\nfunction formatFunction (report) {\n    return [\n        '* Function: **', report.name.replace('<', '&lt;'), '**\\n',\n        '    * Line No.: ', report.line, '\\n',\n        '    * Physical LOC: ', report.sloc.physical, '\\n',\n        '    * Logical LOC: ', report.sloc.logical, '\\n',\n        '    * Parameter count: ', report.params, '\\n',\n        '    * Cyclomatic complexity: ', report.cyclomatic, '\\n',\n        '    * Cyclomatic complexity density: ', report.cyclomaticDensity, '%\\n',\n        '    * Halstead difficulty: ', report.halstead.difficulty, '\\n',\n        '    * Halstead volume: ', report.halstead.volume, '\\n',\n        '    * Halstead effort: ', report.halstead.effort\n    ].join('');\n}\n\n","/home/travis/build/npmtest/node-npmtest-complexity-report/node_modules/complexity-report/src/formats/minimal.js":"/*globals exports */\n\n'use strict';\n\nexports.format = format;\n\nfunction format (result) {\n    return result.reports.reduce(function (formatted, report) {\n        return formatted + formatModule(report) + '\\n';\n    }, '');\n}\n\nfunction formatModule (report) {\n    return [\n        report.path, ': ', report.maintainability,\n        formatFunctions(report.functions)\n    ].join('');\n}\n\nfunction formatFunctions (report) {\n    return report.reduce(function (formatted, r) {\n        return formatted + '\\n' + formatFunction(r);\n    }, '');\n}\n\nfunction formatFunction (report) {\n    return [\n        '  ',\n        report.name,\n        ' (',\n        report.line,\n        '): ',\n        report.cyclomatic\n    ].join('');\n}\n\n","/home/travis/build/npmtest/node-npmtest-complexity-report/node_modules/complexity-report/src/formats/modules.js":"/*globals exports */\n\n'use strict';\n\nexports.format = format;\n\nfunction format (result) {\n    return result.reports.reduce(function (formatted, report) {\n        return formatted + report.path + '\\n';\n    }, '');\n}\n\n","/home/travis/build/npmtest/node-npmtest-complexity-report/node_modules/complexity-report/src/formats/plain.js":"/*globals exports */\n\n'use strict';\n\nexports.format = format;\n\nfunction format (result) {\n    return result.reports.reduce(function (formatted, report) {\n        return formatted + formatModule(report) + '\\n\\n';\n    }, formatProject(result));\n}\n\nfunction formatProject (result) {\n    return [\n        'Mean per-function logical LOC: ', result.loc, '\\n',\n        'Mean per-function parameter count: ', result.params, '\\n',\n        'Mean per-function cyclomatic complexity: ', result.cyclomatic, '\\n',\n        'Mean per-function Halstead effort: ', result.effort, '\\n',\n        'Mean per-module maintainability index: ', result.maintainability, '\\n',\n        'First-order density: ', result.firstOrderDensity, '%\\n',\n        'Change cost: ', result.changeCost, '%\\n',\n        'Core size: ', result.coreSize, '%\\n\\n'\n    ].join('');\n}\n\nfunction formatModule (report) {\n    return [\n        report.path, '\\n\\n',\n        '  Physical LOC: ', report.aggregate.sloc.physical, '\\n',\n        '  Logical LOC: ', report.aggregate.sloc.logical, '\\n',\n        '  Mean parameter count: ', report.params, '\\n',\n        '  Cyclomatic complexity: ', report.aggregate.cyclomatic, '\\n',\n        '  Cyclomatic complexity density: ', report.aggregate.cyclomaticDensity, '%\\n',\n        '  Maintainability index: ', report.maintainability, '\\n',\n        '  Dependency count: ', report.dependencies.length,\n        formatFunctions(report.functions)\n    ].join('');\n}\n\nfunction formatFunctions (report) {\n    return report.reduce(function (formatted, r) {\n        return formatted + '\\n\\n' + formatFunction(r);\n    }, '');\n}\n\nfunction formatFunction (report) {\n    return [\n        '  Function: ', report.name, '\\n',\n        '    Line No.: ', report.line, '\\n',\n        '    Physical LOC: ', report.sloc.physical, '\\n',\n        '    Logical LOC: ', report.sloc.logical, '\\n',\n        '    Parameter count: ', report.params, '\\n',\n        '    Cyclomatic complexity: ', report.cyclomatic, '\\n',\n        '    Cyclomatic complexity density: ', report.cyclomaticDensity, '%\\n',\n        '    Halstead difficulty: ', report.halstead.difficulty, '\\n',\n        '    Halstead volume: ', report.halstead.volume, '\\n',\n        '    Halstead effort: ', report.halstead.effort\n    ].join('');\n}\n\n","/home/travis/build/npmtest/node-npmtest-complexity-report/node_modules/complexity-report/src/formats/xml.js":"/*globals exports */\n\n'use strict';\n\nexports.format = format;\n\nfunction format (result) {\n    return createElementWithAttributes(\n        0,\n        'project',\n        'xmlns=\"\" xml:lang=\"en\" timestamp=\"' +\n            Date.now() +\n            '\" first-order-denisty=\"' +\n            result.firstOrderDensity +\n            '\" change-cost=\"' +\n            result.changeCost +\n            '\" core-size=\"' +\n            result.coreSize + '\"',\n        true,\n        result.reports.reduce(function (formatted, report) {\n            return formatted + formatModule(4, report);\n        }, '')\n    );\n}\n\nfunction createElementWithAttributes (indentation, tag, attributes, linebreak, content) {\n    return createElementWithTags(indentation, tag + ' ' + attributes, tag, linebreak, content);\n}\n\nfunction createElementWithTags (indentation, openingTag, closingTag, linebreak, content) {\n    return indent('<', indentation) + openingTag + '>' +\n        (linebreak ? '\\n' : '') + content +\n        (linebreak ? indent('</', indentation) : '</') + closingTag + '>\\n';\n}\n\nfunction indent (string, indentation) {\n    return (new Array(indentation + 1)).join(' ') + string;\n}\n\nfunction formatModule (indentation, report) {\n    var i, functions = '', nextIndentation = incrementIndentation(indentation);\n\n    for (i = 0; i < report.functions.length; i += 1) {\n        functions += formatFunction(nextIndentation, report.functions[i]);\n    }\n\n    return createElementWithAttributes(\n        indentation, 'module', 'path=\"' + report.path + '\"', true,\n        createElement(nextIndentation, 'maintainability', false, report.maintainability) +\n            formatAggregate(nextIndentation, report.aggregate) + functions\n    );\n}\n\nfunction incrementIndentation (indentation) {\n    return indentation + 4;\n}\n\nfunction formatFunction (indentation, data) {\n    var nextIndentation = incrementIndentation(indentation);\n\n    return createElementWithAttributes(\n        indentation, 'function', 'name=\"' + data.name.replace('<', '&lt;').replace('>', '&gt;') + '\"', true,\n        createElement(nextIndentation, 'line', false, data.line) +\n            formatSlocComplexity(nextIndentation, data.sloc) +\n                formatParameterComplexity(nextIndentation, data.params) +\n                formatCyclomaticComplexity(nextIndentation, data.cyclomatic) +\n                formatCyclomaticDensity(nextIndentation, data.cyclomaticDensity) +\n                formatHalsteadComplexity(nextIndentation, data.halstead)\n    );\n}\n\nfunction createElement (indentation, tag, linebreak, content) {\n    return createElementWithTags(indentation, tag, tag, linebreak, content);\n}\n\nfunction formatSlocComplexity (indentation, data) {\n    return createElement(\n        indentation, 'sloc', true,\n        formatSlocMetrics(incrementIndentation(indentation), data)\n    );\n}\n\nfunction formatSlocMetrics (indentation, data) {\n    return createElement(indentation, 'physical', false, data.physical) +\n        createElement(indentation, 'logical', false, data.logical);\n}\n\nfunction formatParameterComplexity (indentation, data) {\n    return createElement(indentation, 'parameters', false, data);\n}\n\nfunction formatCyclomaticComplexity (indentation, data) {\n    return createElement(indentation, 'cyclomatic', false, data);\n}\n\nfunction formatCyclomaticDensity (indentation, data) {\n    return createElement(indentation, 'cyclomatic-density', false, data);\n}\n\nfunction formatHalsteadComplexity (indentation, data) {\n    return createElement(\n        indentation, 'halstead', true,\n        formatHalsteadMetrics(incrementIndentation(indentation), data)\n    );\n}\n\nfunction formatHalsteadMetrics (indentation, data) {\n    return createElement(indentation, 'length', false, data.length) +\n        createElement(indentation, 'vocabulary', false, data.vocabulary) +\n        createElement(indentation, 'difficulty', false, data.difficulty) +\n        createElement(indentation, 'volume', false, data.volume) +\n        createElement(indentation, 'effort', false, data.effort) +\n        createElement(indentation, 'bugs', false, data.bugs) +\n        createElement(indentation, 'time', false, data.time);\n}\n\nfunction formatAggregate (indentation, data) {\n    var nextIndentation = incrementIndentation(indentation);\n\n    return createElement(\n        indentation, 'aggregate', true,\n        formatSlocComplexity(nextIndentation, data.sloc) +\n            formatParameterComplexity(nextIndentation, data.params) +\n            formatCyclomaticComplexity(nextIndentation, data.cyclomatic) +\n            formatCyclomaticDensity(nextIndentation, data.cyclomaticDensity) +\n            formatHalsteadComplexity(nextIndentation, data.halstead)\n    );\n}\n\n"}